<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

 <!-- This is where we configure Spring-Security  -->
 <!--<security:http auto-config="true" use-expressions="true" access-denied-page="/auth/denied">-->
 <security:http auto-config="true" use-expressions="true" access-denied-page="/auth/login.cns">

  <!-- Secutrity auth form - login to the system. -->
  <security:form-login login-page="/auth/login.cns" default-target-url="/main.cns" authentication-failure-url="/auth/login.cns?error=true" />

  <!-- Security auth form - logout from the system. -->
  <security:logout invalidate-session="true" logout-success-url="/auth/login.cns" logout-url="/auth/logout.cns" delete-cookies="true"/>

  <!-- Turning on "remember-me" function. Key valid time in seconds (2419200 seconds = 4 weeks). -->
  <security:remember-me key="censusRememberKey" token-validity-seconds="2419200" />

  <!-- Login page - anybody can access this page. -->
  <security:intercept-url pattern="/auth/login" access="permitAll"/>

  <!-- System main page. Any authenticated user can access this page. -->
  <security:intercept-url pattern="/main*" access="isAuthenticated()"/>
  <!--<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')"/>-->
  <!--<security:intercept-url pattern="/main/common" access="hasRole('ROLE_USER')"/>-->
  <!-- Personnel admin module -->
  <security:intercept-url pattern="/personnel/admin/**" access="hasRole('personnelAdminsGroup')" />
  <!-- Personnel user module -->
  <security:intercept-url pattern="/personnel/user/**" access="hasRole('personnelAdminsGroup')" />

 </security:http>

 <!-- Application authentication manager. This manager is used to make dicision - grant access to system or not.
      Manager uses authentication provider that gets data from DB via jdbc service. -->
 <security:authentication-manager>
  <security:authentication-provider user-service-ref="jdbcUserService" />
  <!--<security:authentication-provider user-service-ref="customUserDetailsService" />-->
 </security:authentication-manager>

 <!---->
 <!--
 <bean id="customUserDetailsService" class="org.census.webapp.services.CensusUserDetailsService">
  <property name="dataSource" ref="dataSource" />
 </bean>
 -->

 <!--
  User service via jdbc (database access) - получение пользователей из БД. Указаны специальные запросы для получения
  пользователя по имени и для получения списка ролей пользователя. Поле deleted используется в качестве критерия
  "разрешения"(не =0)/"запрещения"(=0) пользователя - поэтому такой синтаксис. Еще тема: запрос для получения списка
  ролей пользователя можно сделать представлением в БД.
  -->
 <security:jdbc-user-service id="jdbcUserService" data-source-ref="dataSource"
  users-by-username-query="select name, password, abs(deleted - 1) from logicUsers where name = ?"
  authorities-by-username-query="select lu.name as userName, lg.name as groupName
                                 from logicUsers lu
                                 inner join users_2_groups ug on (lu.id = ug.userId)
                                 inner join logicGroups lg on (lg.id = ug.groupId)
                                 where lu.name = ?"/>


 <!-- Declare an authentication-manager to use a custom userDetailsService -->
 <!--<security:authentication-manager>-->
  <!--<security:authentication-provider user-service-ref="customUserDetailsService">-->
   <!--<security:password-encoder ref="passwordEncoder"/>-->
  <!--</security:authentication-provider>-->
 <!--</security:authentication-manager>-->
 <!-- Use a Md5 encoder since the user's passwords are stored as Md5 in the database -->
 <!--<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>-->
 <!-- A custom service where Spring will retrieve users and their corresponding access levels  -->
 <!--<bean id="customUserDetailsService" class="org.census.webapp.services.CustomUserDetailsService"/>-->

</beans>