<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
 <display-name>Census system</display-name>

 <!-- Spring servlet name is important. This name points to file that contains the bean definitions
      (plain old Java objects) used by the DispatcherServlet. It is the WebApplicationContext where
      all web-related components go. The name of this file is determined by the value of the
      <servlet-name/> element from the 'web.xml', with '-servlet' appended to it (in our case =
      'census-servlet.xml'). This is the standard naming convention used with Spring's Web MVC
      framework. -->
 <servlet>
  <servlet-name>spring</servlet-name>
  <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  <!-- Here we're changing default name of config file (default name in our case is
       spring-servlet.xml) to census-servlet.xml -->
  <init-param>
   <param-name>contextConfigLocation</param-name>
   <param-value>classpath:census-servlet.xml</param-value>
  </init-param>
  <load-on-startup>1</load-on-startup>
 </servlet>

 <servlet-mapping>
  <servlet-name>spring</servlet-name>
  <url-pattern>*.cns</url-pattern>
 </servlet-mapping>

 <!-- Spring security filter -->
 <filter>
  <filter-name>springSecurityFilterChain</filter-name>
  <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
 </filter>
 <filter-mapping>
  <filter-name>springSecurityFilterChain</filter-name>
  <url-pattern>/*</url-pattern>
 </filter-mapping>

 <!-- App request encoding filter -->
 <filter>
  <filter-name>CensusEncodingFilter</filter-name>
  <filter-class>org.census.webapp.web.system.CensusEncodingFilter</filter-class>
 </filter>
 <filter-mapping>
  <filter-name>CensusEncodingFilter</filter-name>
  <url-pattern>/*</url-pattern>
 </filter-mapping>

    <!-- This filter is for LAZY fetch associated entities collections (with should use this filter or we will get
         an exception [org.hibernate.LazyInitializationException: failed to lazily initialize a collection of role], instead
         of this filter we can use annotation @Transactional for all our components - controllers, services, etc.) -->
    <filter>
        <filter-name>osivFilter</filter-name>
        <!--<filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>-->
        <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>osivFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

 <!-- This is listener that loads additional configuration into a Spring application context
      alongside the application context created by DispatcherServlet. -->
 <listener>
  <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
 </listener>

 <!-- Context parameter for ContextLoaderListener - where it can find spring config files. -->
 <context-param>
  <param-name>contextConfigLocation</param-name>
   <param-value>
    classpath:census-context.xml
    classpath:census-data.xml
    classpath:census-security.xml
   </param-value>
  </context-param>

 <welcome-file-list>
  <welcome-file>index.html</welcome-file>
 </welcome-file-list>

</web-app>